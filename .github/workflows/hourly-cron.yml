name: Cron Job for Backup and Automation

on:
  schedule:
    - cron: "0 * * * *"  # Runs every hour
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  run-api-requests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Health Check - Wait for API Service to Start
      id: health_check
      env:
        API_URL: ${{ secrets.API_URL }}
      run: |
        echo "Checking API health..."
        MAX_RETRIES=24  # 2 minutes (24 * 5 seconds)
        RETRY_DELAY=5

        for ((i=1; i<=MAX_RETRIES; i++)); do
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/health" || echo "000")

          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ API is up and running."
            exit 0
          fi

          echo "Waiting for API... (Attempt $i/$MAX_RETRIES)"
          sleep $RETRY_DELAY
        done

        echo "❌ API did not start in time. Exiting workflow."
        exit 1

    - name: Check for In-Progress Task
      id: check_task
      env:
        API_URL: ${{ secrets.API_URL }}
      run: |
        echo "Checking for in-progress task..."
        INPROGRESS_TASK_ID=$(curl -s -L "$API_URL/task_status/check_inprogress/" | jq -r '.task_id')

        if [ "$INPROGRESS_TASK_ID" != "null" ]; then
          echo "Task already in progress: $INPROGRESS_TASK_ID"
          echo "task_id=$INPROGRESS_TASK_ID" >> $GITHUB_ENV
          echo "task_id=$INPROGRESS_TASK_ID" >> $GITHUB_OUTPUT
        else
          echo "No in-progress task found. Proceeding to start a new task."
          echo "task_id=" >> $GITHUB_ENV
          echo "task_id=" >> $GITHUB_OUTPUT
        fi

    - name: Start New Task (if no in-progress task)
      id: start_task
      if: steps.check_task.outputs.task_id == ''
      env:
        API_URL: ${{ secrets.API_URL }}
      run: |
        echo "Starting a new task..."
        RESPONSE=$(curl -s -L -X POST "$API_URL/automate-all/" \
          -H "Content-Type: application/json" \
          -d '{"n": "all"}')

        TASK_ID=$(echo "$RESPONSE" | jq -r '.task_id')

        if [ -z "$TASK_ID" ] || [ "$TASK_ID" == "null" ]; then
          echo "❌ Failed to initiate redemption process."
          exit 1
        fi

        echo "Task started! Tracking progress..."
        echo "task_id=$TASK_ID" >> $GITHUB_ENV
        echo "task_id=$TASK_ID" >> $GITHUB_OUTPUT

    - name: Poll Task Progress with Timeout
      env:
        API_URL: ${{ secrets.API_URL }}
      run: |
        TASK_ID="${{ env.task_id }}"
        if [ -z "$TASK_ID" ]; then
          echo "No valid task ID found. Exiting..."
          exit 1
        fi

        echo "Tracking progress for Task ID: $TASK_ID"
        START_TIME=$(date +%s)
        TIMEOUT=600  # 10 minutes in seconds

        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))

          if [ "$ELAPSED_TIME" -ge "$TIMEOUT" ]; then
            echo "⏳ Task timeout reached. Stopping workflow."
            exit 1
          fi

          STATUS_RESPONSE=$(curl -s -L "$API_URL/task_status/$TASK_ID/")
          PROGRESS=$(echo $STATUS_RESPONSE | jq -r '.progress')
          STATUS=$(echo $STATUS_RESPONSE | jq -r '.status')

          echo "⏳ Progress: $PROGRESS% - Status: $STATUS"

          if [ "$STATUS" == "Completed" ] || [ "$STATUS" == "Failed" ]; then
            echo "✅ Task finished with status: $STATUS"
            break
          fi

          sleep 5  # Poll every 5 seconds
        done
