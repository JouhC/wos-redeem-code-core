name: Cron Job for Backup and Automation

on:
  schedule:
    - cron: "0 */12 * * *"  # Runs every 12 hours
  workflow_dispatch:  # Allows manual triggering of the workflow

jobs:
  run-api-requests:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Check for In-Progress Task
      id: check_task  # Set step ID to reference outputs
      env:
        API_URL: ${{ secrets.API_URL }}
      run: |
        INPROGRESS_TASK_ID=$(curl -s "$API_URL/check_inprogress/" | jq -r '.task_id')
        if [ "$INPROGRESS_TASK_ID" != "null" ]; then
          echo "Task already in progress: $INPROGRESS_TASK_ID"
          echo "task_id=$INPROGRESS_TASK_ID" >> $GITHUB_ENV
          echo "::set-output name=task_id::$INPROGRESS_TASK_ID"
        else
          echo "No in-progress task found. Proceeding to start a new task."
          echo "::set-output name=task_id::"
        fi

    - name: Start New Task (if no in-progress task)
      id: start_task
      if: steps.check_task.outputs.task_id == ''
      env:
        API_URL: ${{ secrets.API_URL }}
      run: |
        RESPONSE=$(curl -s -X POST "$API_URL/automate-all/")
        TASK_ID=$(echo $RESPONSE | jq -r '.task_id')
        if [ "$TASK_ID" == "null" ]; then
          echo "Failed to initiate redemption process."
          exit 1
        fi
        echo "Task started! Tracking progress..."
        echo "task_id=$TASK_ID" >> $GITHUB_ENV
        echo "::set-output name=task_id::$TASK_ID"

    - name: Poll Task Progress with Timeout
      env:
        API_URL: ${{ secrets.API_URL }}
      run: |
        TASK_ID="${{ steps.start_task.outputs.task_id || steps.check_task.outputs.task_id }}"
        echo "Tracking progress for Task ID: $TASK_ID"
        START_TIME=$(date +%s)
        TIMEOUT=300  # 5 minutes in seconds

        while true; do
          CURRENT_TIME=$(date +%s)
          ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
          if [ "$ELAPSED_TIME" -ge "$TIMEOUT" ]; then
            echo "Task timeout reached. Stopping workflow."
            exit 1
          fi
          sleep 5  # Poll every 5 seconds
          STATUS_RESPONSE=$(curl -s "$API_URL/task_status/$TASK_ID/")
          PROGRESS=$(echo $STATUS_RESPONSE | jq -r '.progress')
          STATUS=$(echo $STATUS_RESPONSE | jq -r '.status')

          echo "Progress: $PROGRESS% - Status: $STATUS"

          if [ "$STATUS" == "Completed" ] || [ "$STATUS" == "Failed" ]; then
            echo "Task finished with status: $STATUS"
            break
          fi
        done
